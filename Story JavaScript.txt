
// Initialize story variables
Config.history.maxStates = 10;

// Character creation state management
setup.characterDefaults = {
    name: "",
    race: "",
    background: "",
    backgroundDesc: "",
    class: "",
    classDesc: "",
    pronouns: "",
    statPoints: 10,
    validName: false,
    appliedBackgroundBonus: false,
    stats: {
        strength: 10,
        dexterity: 10,
        intelligence: 10,
        charisma: 10
    }
};

// Central error handler
setup.handleError = function(context, error) {
    console.error(`Error in ${context}:`, error);
    if (Config.debug) {
        UI.alert(`Error in ${context}: ${error.message}`);
    }
    return false; // Return a value for function chaining
};

// Debounce function for event handling
setup.debounce = function(func, wait) {
    let timeout;
    return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), wait);
    };
};

// Initialize or validate character state
setup.validateProgressionState = function() {
    try {
        // Initialize character variables if they don't exist
        for (const [key, value] of Object.entries(setup.characterDefaults)) {
            if (State.variables[key] === undefined) {
                if (typeof value === 'object' && value !== null) {
                    State.variables[key] = jQuery.extend(true, {}, value);
                } else {
                    State.variables[key] = value;
                }
            }
        }
        return true;
    } catch (e) {
        return setup.handleError("validateProgressionState", e);
    }
};

// Name validation with special character restrictions
setup.validateName = function(name) {
    try {
        if (!name) return "Please enter a name.";
        if (name.trim().length < 2) return "Name must be at least 2 characters long.";
        if (name.length > 20) return "Name must be less than 20 characters.";
        if (!/^[a-zA-Z\s'-]+$/.test(name)) return "Name can only contain letters, spaces, hyphens and apostrophes.";
        return null;
    } catch (e) {
        setup.handleError("validateName", e);
        return "Error validating name.";
    }
};

// Point-buy system functions
setup.increaseStat = function(stat) {
    try {
        if (!State.variables.stats) {
            State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
        }
        
        if (State.variables.statPoints > 0 && State.variables.stats[stat] < 18) {
            State.variables.stats[stat]++;
            State.variables.statPoints--;
            setup.updateStatDisplay();
            return true;
        }
        return false;
    } catch (e) {
        return setup.handleError("increaseStat", e);
    }
};

setup.decreaseStat = function(stat) {
    try {
        if (!State.variables.stats) {
            State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
            return false;
        }
        
        if (State.variables.stats[stat] > 8) {
            State.variables.stats[stat]--;
            State.variables.statPoints++;
            setup.updateStatDisplay();
            return true;
        }
        return false;
    } catch (e) {
        return setup.handleError("decreaseStat", e);
    }
};

setup.updateStatDisplay = function() {
    try {
        if ($('#points-remaining').length) {
            $('#points-remaining').text(State.variables.statPoints);
        }
        
        if (State.variables.stats) {
            for (let stat in State.variables.stats) {
                if ($(`#${stat}-value`).length) {
                    $(`#${stat}-value`).text(State.variables.stats[stat]);
                    
                    const modifier = Math.floor((State.variables.stats[stat] - 10) / 2);
                    const modText = modifier >= 0 ? `+${modifier}` : modifier;
                    
                    if ($(`#${stat}-modifier`).length) {
                        $(`#${stat}-modifier`).text(modText);
                    }
                    
                    // Update button states
                    if (State.variables.stats[stat] <= 8) {
                        $(`#decrease-${stat}`).attr('disabled', true).attr('aria-disabled', 'true');
                    } else {
                        $(`#decrease-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    }
                    
                    if (State.variables.stats[stat] >= 18 || State.variables.statPoints <= 0) {
                        $(`#increase-${stat}`).attr('disabled', true).attr('aria-disabled', 'true');
                    } else {
                        $(`#increase-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    }
                }
            }
        }
        return true;
    } catch (e) {
        console.error("Error in updateStatDisplay:", e);
        return false;
    }
};

// Name suggestion system
setup.namePatterns = {
    noble: ["Aldrich", "Blackwood", "Constantine", "Devereux", "Highwind", "Ravencrest", "Sterling", "Wintervale"],
    scholar: ["Archibald", "Benedict", "Cornelius", "Thaddeus", "Grimoire", "Lightweaver", "Sage", "Wisewater"],
    thief: ["Raven", "Shadow", "Swift", "Whisper", "Dagger", "Nightshade", "Silentfoot", "Vex"],
    mercenary: ["Axe", "Blade", "Hunter", "Steel", "Ironclad", "Redsteel", "Stormfist", "Warhawk"],
    outcast: ["Exile", "Lost", "Nameless", "Wraith", "Cipher", "Ghostwalker", "None", "Void"],
    augmented: ["Chrome", "Nexus", "Prime", "Vector", "Cypher", "Matrix", "Surge", "Zero"],
    streetrat: ["Rat", "Scrapper", "Spark", "Wire", "Gutter", "Junk", "Rust", "Scrap"],
    cultist: ["Cipher", "Devotee", "Oracle", "Seeker", "Darkwhisper", "Mindweaver", "Truthseeker", "Voidcaller"],
    wanderer: ["Drift", "Roam", "Storm", "Wind", "Dustwalker", "Pathfinder", "Stormchaser", "Wayfarer"],
    corporate: ["Ash", "Frost", "Pierce", "Vale", "Diamond", "Goldweaver", "Platinumhand", "Silversmith"]
};

setup.suggestName = function(type) {
    try {
        if (setup.namePatterns[type]) {
            let names = setup.namePatterns[type];
            return names[Math.floor(Math.random() * names.length)];
        }
        return "Unknown Type";
    } catch (e) {
        setup.handleError("suggestName", e);
        return "Error";
    }
};

// UI Initialization functions
setup.initTooltips = function() {
    try {
        $('.tooltip-trigger').off('mouseenter mouseleave');
        $('.tooltip-trigger').hover(
            function() {
                $(this).find('.tooltip').fadeIn(200);
            },
            function() {
                $(this).find('.tooltip').fadeOut(200);
            }
        );
        return true;
    } catch (e) {
        return setup.handleError("initTooltips", e);
    }
};

// Background selection with bonus stat calculations
setup.selectBackground = function(background) {
    try {
        if (!State.variables.stats) {
            State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
        }
        
        State.variables.background = background;
        
        // Only apply bonuses if they haven't been applied yet
        if (!State.variables.appliedBackgroundBonus) {
            switch(background) {
                case "Noble":
                    State.variables.stats.charisma += 2;
                    break;
                case "Scholar":
                    State.variables.stats.intelligence += 2;
                    break;
                case "Thief":
                    State.variables.stats.dexterity += 2;
                    break;
                case "Mercenary":
                    State.variables.stats.strength += 2;
                    break;
                case "Outcast":
                    State.variables.stats.intelligence += 1;
                    State.variables.stats.charisma += 1;
                    break;
                case "Augmented":
                    State.variables.stats.strength += 1;
                    State.variables.stats.dexterity += 1;
                    break;
                case "Street Rat":
                    State.variables.stats.dexterity += 1;
                    State.variables.stats.intelligence += 1;
                    break;
                case "Cultist":
                    State.variables.stats.intelligence += 1;
                    State.variables.stats.charisma += 1;
                    break;
                case "Wanderer":
                    State.variables.stats.dexterity += 1;
                    State.variables.stats.charisma += 1;
                    break;
                case "Corporate":
                    State.variables.stats.intelligence += 1;
                    State.variables.stats.charisma += 1;
                    break;
            }
            State.variables.appliedBackgroundBonus = true;
        }
        
        setup.updateStatDisplay();
        return true;
    } catch (e) {
        return setup.handleError("selectBackground", e);
    }
};

// Initialize a new character
setup.initializeCharacter = function() {
    try {
        // Reset all character properties to defaults
        for (const [key, value] of Object.entries(setup.characterDefaults)) {
            if (typeof value === 'object' && value !== null) {
                State.variables[key] = jQuery.extend(true, {}, value);
            } else {
                State.variables[key] = value;
            }
        }
        return true;
    } catch (e) {
        setup.handleError("initializeCharacter", e);
        return false;
    }
};

// Custom macro for character stat blocks in the point-buy system
Macro.add('statBlock', {
    handler: function() {
        try {
            if (this.args.length < 1) {
                return this.error('The <<statBlock>> macro requires a stat name as an argument');
            }
            
            const stat = this.args[0];
            
            // Ensure stats are initialized
            if (!State.variables.stats) {
                State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
            }
            
            // If the requested stat doesn't exist yet, initialise it
            if (!(stat in State.variables.stats)) {
                State.variables.stats[stat] = 10;
            }
            
            const value = State.variables.stats[stat];
            const modifier = Math.floor((value - 10) / 2);
            const modifierText = (modifier >= 0) ? `+${modifier}` : `${modifier}`;
            
            // Use SugarCube's event handling approach instead of direct onclick
            const output = `
            <div class="stat-block tooltip-trigger" aria-label="${stat.charAt(0).toUpperCase() + stat.slice(1)} stat block">
                <label for="${stat}-value">${stat.charAt(0).toUpperCase() + stat.slice(1)}</label>
                <span id="${stat}-value" aria-live="polite">${value}</span>
                <button id="decrease-${stat}" aria-label="Decrease ${stat}" 
                        ${value <= 8 ? 'disabled aria-disabled="true"' : ''}>-</button>
                <button id="increase-${stat}" aria-label="Increase ${stat}" 
                        ${(State.variables.statPoints <= 0 || value >= 18) ? 'disabled aria-disabled="true"' : ''}>+</button>
                <span id="${stat}-modifier" aria-label="${stat} modifier">${modifierText}</span>
                <div class="tooltip">Base ${stat} score. Modifier shown is ${modifierText}.</div>
            </div>`;
            
            $(this.output).wiki(output);
            
            // Attach event handlers *after* adding to DOM
            $(this.output).find(`#increase-${stat}`).on('click', function() {
                if (State.variables.statPoints > 0 && State.variables.stats[stat] < 18) {
                    State.variables.stats[stat]++;
                    State.variables.statPoints--;
                    // Update display
                    $(`#${stat}-value`).text(State.variables.stats[stat]);
                    const newMod = Math.floor((State.variables.stats[stat] - 10) / 2);
                    const newModText = (newMod >= 0) ? `+${newMod}` : `${newMod}`;
                    $(`#${stat}-modifier`).text(newModText);
                    $('#points-remaining').text(State.variables.statPoints);
                    
                    // Update button states
                    if (State.variables.stats[stat] >= 18) {
                        $(this).attr('disabled', true).attr('aria-disabled', 'true');
                    }
                    $(`#decrease-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    
                    if (State.variables.statPoints <= 0) {
                        $('.stat-block button[id^="increase-"]').attr('disabled', true).attr('aria-disabled', 'true');
                    }
                }
            });
            
            $(this.output).find(`#decrease-${stat}`).on('click', function() {
                if (State.variables.stats[stat] > 8) {
                    State.variables.stats[stat]--;
                    State.variables.statPoints++;
                    // Update display
                    $(`#${stat}-value`).text(State.variables.stats[stat]);
                    const newMod = Math.floor((State.variables.stats[stat] - 10) / 2);
                    const newModText = (newMod >= 0) ? `+${newMod}` : `${newMod}`;
                    $(`#${stat}-modifier`).text(newModText);
                    $('#points-remaining').text(State.variables.statPoints);
                    
                    // Update button states
                    if (State.variables.stats[stat] <= 8) {
                        $(this).attr('disabled', true).attr('aria-disabled', 'true');
                    }
                    $(`#increase-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    
                    if (State.variables.statPoints > 0) {
                        $('.stat-block button[id^="increase-"]').each(function() {
                            const targetStat = $(this).attr('id').replace('increase-', '');
                            if (State.variables.stats[targetStat] < 18) {
                                $(this).attr('disabled', false).attr('aria-disabled', 'false');
                            }
                        });
                    }
                }
            });
        } catch (e) {
            return this.error(`Error in statBlock macro: ${e.message}`);
        }
    }
});

// Event handlers - Story startup
$(document).one(':storyready', function() {
    // Initialize character state
    setup.validateProgressionState();
});

// Create settings for accessibility options
Setting.addHeader("Accessibility", "Options to improve game accessibility");

Setting.addList("fontSize", {
    label: "Text Size",
    desc: "Change the size of text throughout the game",
    list: ["small", "medium", "large", "extra-large"],
    default: "medium"
});

Setting.addToggle("highContrast", {
    label: "High Contrast Mode",
    desc: "Increases contrast for better readability",
    default: false
});

Setting.addToggle("reduceAnimations", {
    label: "Reduce Animations",
    desc: "Minimizes or removes animations that may cause discomfort",
    default: false
});
