// Initialize core variables
Config.history.maxStates = 10;

// Character creation defaults
setup.characterDefaults = {
    name: "",
    race: "",
    background: "",
    backgroundDesc: "",
    class: "",
    classDesc: "",
    pronouns: "",
    statPoints: 10,
    validName: false,
    appliedBackgroundBonus: false,
    stats: {
        strength: 10,
        dexterity: 10,
        intelligence: 10,
        charisma: 10
    }
};

// Initialize character state
setup.validateState = function() {
    for (const [key, value] of Object.entries(setup.characterDefaults)) {
        if (State.variables[key] === undefined) {
            if (typeof value === 'object' && value !== null) {
                State.variables[key] = jQuery.extend(true, {}, value);
            } else {
                State.variables[key] = value;
            }
        }
    }
    return true;
};

// Validate progression and redirect if needed
setup.validateNavigation = function(currentPassage) {
    setup.validateState();
    
    const progressionOrder = [
        "Name and Pronouns",
        "Race Selection",
        "Background Selection",
        "Class Selection",
        "Primary Stat Selection",
        "Character Summary",
        "Creation Complete"
    ];
    
    const currentIndex = progressionOrder.indexOf(currentPassage);
    if (currentIndex === -1) return true;
    
    // Define prerequisites for each step with simplified logic
    const prerequisites = {
        "Race Selection": () => State.variables.name && State.variables.pronouns,
        "Background Selection": () => State.variables.race,
        "Class Selection": () => State.variables.background,
        "Primary Stat Selection": () => State.variables.class,
        "Character Summary": () => State.variables.statPoints === 0,
        "Creation Complete": () => State.variables.name && State.variables.race && 
                                   State.variables.background && State.variables.class && 
                                   State.variables.statPoints === 0
    };
    
    // Check if prerequisites are met
    if (prerequisites[currentPassage] && !prerequisites[currentPassage]()) {
        const fallbackRedirects = {
            "Race Selection": "Name and Pronouns",
            "Background Selection": "Race Selection",
            "Class Selection": "Background Selection",
            "Primary Stat Selection": "Class Selection",
            "Character Summary": "Primary Stat Selection",
            "Creation Complete": "Character Summary"
        };
        
        Engine.play(fallbackRedirects[currentPassage]);
        return false;
    }
    
    return true;
};

// Name validation with simplified logic
setup.validateName = function(name) {
    if (!name) return "Please enter a name.";
    if (name.trim().length < 2) return "Name must be at least 2 characters long.";
    if (name.length > 20) return "Name must be less than 20 characters.";
    if (!/^[a-zA-Z\s'-]+$/.test(name)) return "Name can only contain letters, spaces, hyphens and apostrophes.";
    return null;
};

// Stat management with cleaner logic
setup.increaseStat = function(stat) {
    if (!State.variables.stats) {
        State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
    }
    
    if (State.variables.statPoints > 0 && State.variables.stats[stat] < 18) {
        State.variables.stats[stat]++;
        State.variables.statPoints--;
        setup.updateStatDisplay();
        return true;
    }
    return false;
};

setup.decreaseStat = function(stat) {
    if (!State.variables.stats) {
        State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
        return false;
    }
    
    if (State.variables.stats[stat] > 8) {
        State.variables.stats[stat]--;
        State.variables.statPoints++;
        setup.updateStatDisplay();
        return true;
    }
    return false;
};

setup.updateStatDisplay = function() {
    if ($('#points-remaining').length) {
        $('#points-remaining').text(State.variables.statPoints);
    }
    
    if (State.variables.stats) {
        for (let stat in State.variables.stats) {
            if ($(`#${stat}-value`).length) {
                $(`#${stat}-value`).text(State.variables.stats[stat]);
                
                const modifier = Math.floor((State.variables.stats[stat] - 10) / 2);
                const modText = modifier >= 0 ? `+${modifier}` : modifier;
                
                if ($(`#${stat}-modifier`).length) {
                    $(`#${stat}-modifier`).text(modText);
                }
                
                // Update button states
                if (State.variables.stats[stat] <= 8) {
                    $(`#decrease-${stat}`).attr('disabled', true).attr('aria-disabled', 'true');
                } else {
                    $(`#decrease-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                }
                
                if (State.variables.stats[stat] >= 18 || State.variables.statPoints <= 0) {
                    $(`#increase-${stat}`).attr('disabled', true).attr('aria-disabled', 'true');
                } else {
                    $(`#increase-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                }
            }
        }
    }
};

// Name suggestion system
setup.namePatterns = {
    noble: ["Aldrich", "Blackwood", "Constantine", "Devereux", "Highwind", "Ravencrest", "Sterling", "Wintervale"],
    scholar: ["Archibald", "Benedict", "Cornelius", "Thaddeus", "Grimoire", "Lightweaver", "Sage", "Wisewater"],
    thief: ["Raven", "Shadow", "Swift", "Whisper", "Dagger", "Nightshade", "Silentfoot", "Vex"],
    mercenary: ["Axe", "Blade", "Hunter", "Steel", "Ironclad", "Redsteel", "Stormfist", "Warhawk"],
    outcast: ["Exile", "Lost", "Nameless", "Wraith", "Cipher", "Ghostwalker", "None", "Void"],
    augmented: ["Chrome", "Nexus", "Prime", "Vector", "Cypher", "Matrix", "Surge", "Zero"],
    streetrat: ["Rat", "Scrapper", "Spark", "Wire", "Gutter", "Junk", "Rust", "Scrap"],
    cultist: ["Cipher", "Devotee", "Oracle", "Seeker", "Darkwhisper", "Mindweaver", "Truthseeker", "Voidcaller"],
    wanderer: ["Drift", "Roam", "Storm", "Wind", "Dustwalker", "Pathfinder", "Stormchaser", "Wayfarer"],
    corporate: ["Ash", "Frost", "Pierce", "Vale", "Diamond", "Goldweaver", "Platinumhand", "Silversmith"]
};

setup.suggestName = function(type) {
    if (setup.namePatterns[type]) {
        let names = setup.namePatterns[type];
        return names[Math.floor(Math.random() * names.length)];
    }
    return "Unknown Type";
};

// Consolidated UI functionality
setup.initUI = function() {
    // Initialize tooltips
    $('.tooltip-trigger').off('mouseenter mouseleave').hover(
        function() { $(this).find('.tooltip').fadeIn(200); },
        function() { $(this).find('.tooltip').fadeOut(200); }
    );
    
    // Update stats display
    setup.updateStatDisplay();
    
    // Initialize navigation
    $('[data-passage]').off('click.navigation').on('click.navigation', function(event) {
        event.preventDefault();
        const passage = $(this).data('passage');
        if (passage) {
            if ($(this).hasClass('next-button') && $(this).parent().find('.disabled-next').length > 0) {
                return false;
            }
            Engine.play(passage);
        }
        return false;
    });
    
    // Initialize smooth scrolling
    $('button[data-select]').off('click.smooth-scroll').on('click.smooth-scroll', function() {
        const detailsPanel = document.querySelector('.details-panel');
        if (detailsPanel) {
            setTimeout(function() {
                detailsPanel.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'nearest' 
                });
            }, 100);
        }
    });
    
    // Initialize card selection
    $('.selection-card button').off('click.card-selection').on('click.card-selection', function() {
        $('.selection-card').removeClass('selected');
        $(this).closest('.selection-card').addClass('selected');
    });
    
    // Add accessibility enhancements
    setup.addAccessibilityFeatures();
};

// Background stat bonuses
setup.selectBackground = function(background) {
    if (!State.variables.stats) {
        State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
    }
    
    State.variables.background = background;
    
    if (!State.variables.appliedBackgroundBonus) {
        switch(background) {
            case "Noble":
                State.variables.stats.charisma += 2;
                break;
            case "Scholar":
                State.variables.stats.intelligence += 2;
                break;
            case "Thief":
                State.variables.stats.dexterity += 2;
                break;
            case "Mercenary":
                State.variables.stats.strength += 2;
                break;
            case "Outcast":
                State.variables.stats.intelligence += 1;
                State.variables.stats.charisma += 1;
                break;
            case "Augmented":
                State.variables.stats.strength += 1;
                State.variables.stats.dexterity += 1;
                break;
            case "Street Rat":
                State.variables.stats.dexterity += 1;
                State.variables.stats.intelligence += 1;
                break;
            case "Cultist":
                State.variables.stats.intelligence += 1;
                State.variables.stats.charisma += 1;
                break;
            case "Wanderer":
                State.variables.stats.dexterity += 1;
                State.variables.stats.charisma += 1;
                break;
            case "Corporate":
                State.variables.stats.intelligence += 1;
                State.variables.stats.charisma += 1;
                break;
        }
        State.variables.appliedBackgroundBonus = true;
    }
    
    setup.updateStatDisplay();
    return true;
};

// Reset character to defaults
setup.initializeCharacter = function() {
    for (const [key, value] of Object.entries(setup.characterDefaults)) {
        if (typeof value === 'object' && value !== null) {
            State.variables[key] = jQuery.extend(true, {}, value);
        } else {
            State.variables[key] = value;
        }
    }
    return true;
};

// Accessibility support
setup.addAccessibilityFeatures = function() {
    // Add screen reader descriptions
    $('.background-option, .class-option')
        .attr('role', 'group')
        .attr('aria-label', function() {
            return $(this).find('button').first().text().trim() + ' option';
        });
    
    $('.background-option button, .class-option button').each(function() {
        const optionName = $(this).text().trim();
        const description = $(this).closest('.background-option, .class-option')
                                .find('p').first().text().trim() || '';
        
        $(this).attr('aria-label', `Select ${optionName}: ${description.substring(0, 100)}...`);
    });
    
    $('.suggestion-buttons button').attr('aria-label', function() {
        return `Suggest ${$(this).text()} for your character`;
    });
    
    $('[data-race]').each(function() {
        const raceName = $(this).attr('data-race');
        const description = $(this).closest('li').find('p').first().text().trim() || '';
        $(this).attr('aria-label', `Select ${raceName}: ${description.substring(0, 100)}...`);
    });
    
    $('.selected-class-display, #selected-race, #selected-background, #selected-class')
        .attr('aria-live', 'polite');
    
    $('.error').attr('aria-live', 'assertive');
    
    // Make elements focusable
    $('button:not([tabindex]), a:not([tabindex]), [role="button"]:not([tabindex])')
        .attr('tabindex', '0');
    
    $('.disabled-button, button[disabled]')
        .attr('aria-disabled', 'true')
        .attr('tabindex', '-1');
        
    $('button, a, [role="button"]').each(function() {
        if (!$(this).css('outline') || $(this).css('outline') === 'none') {
            $(this).css('outline-offset', '2px');
        }
    });
};

// Validate name and continue
setup.validateNameAndContinue = function() {
    const nameError = setup.validateName(State.variables.tempName);
    
    if (nameError) {
        if ($('#name-error').length) {
            $('#name-error').text(nameError).show();
        }
        return false;
    }
    
    if (!State.variables.pronouns) {
        if ($('#pronoun-error').length) {
            $('#pronoun-error').text("Please select your pronouns.").show();
        }
        return false;
    }
    
    State.variables.name = State.variables.tempName;
    State.variables.validName = true;
    Engine.play("Race Selection");
    return true;
};

// Selection page macro for character creation
Macro.add('selectionPage', {
    tags: ['options', 'navigation'],
    handler: function() {
        try {
            if (this.args.length < 3) {
                return this.error('The <<selectionPage>> macro requires at least 3 arguments: stepNumber, pageTitle, itemType');
            }
            
            const [stepNumber, pageTitle, itemType] = this.args;
            const selectedDivId = this.args[3] || `selected-${itemType.toLowerCase()}`;
            const nextPassage = this.args[4] || `${itemType} Selection`;
            
            // Process the steps array from the options tag
            let steps = [];
            if (this.payload[0] && this.payload[0].args.length > 0) {
                steps = this.payload[0].args;
            } else {
                steps = ["Name", "Race", "Background", "Class", "Stats", "Finish"];
            }
            
            // Progress bar HTML
            let output = `<div class="creation-progress">`;
            for (let i = 1; i <= 6; i++) {
                output += `
                <div class="progress-step ${i < stepNumber ? 'completed' : i === stepNumber ? 'active' : ''}">
                    <span>${i}</span>
                    <span class="progress-step-label">${steps[i-1] || `Step ${i}`}</span>
                </div>`;
            }
            output += `</div>`;
            
            // Page title
            output += `<h2>${pageTitle}</h2>`;
            
            // Options container
            output += `<div class="class-options">`;
            if (this.payload[0]) {
                output += this.payload[0].contents;
            }
            output += `</div>`;
            
            // Selected item display
            output += `
            <div id="${selectedDivId}" class="selected-class-display">
                <<if $temp${itemType} != "">>
                    Selected ${itemType.toLowerCase()}: <<print $temp${itemType}>>
                    <br>
                    <<print $temp${itemType}Desc>>
                <</if>>
            </div>`;
            
            // Error display
            output += `<div id="${itemType.toLowerCase()}-error" class="error"></div>`;
            
            // Navigation buttons
            output += `<div class="navigation-controls">`;
            if (this.payload[1]) {
                output += this.payload[1].contents;
            } else {
                output += `
                <<button "Continue to ${nextPassage}">>
                    <<if $temp${itemType} and $temp${itemType}.trim() !== "">>
                        <<set $${itemType.toLowerCase()} to $temp${itemType}>>
                        <<set $${itemType.toLowerCase()}Desc to $temp${itemType}Desc>>
                        <<goto "${nextPassage}">>
                    <<else>>
                        <<replace "#${itemType.toLowerCase()}-error">>Please select a ${itemType.toLowerCase()}.<</replace>>
                    <</if>>
                <</button>>`;
            }
            output += `</div>`;
            
            $(this.output).wiki(output);
        } catch (e) {
            return this.error(`Error in selectionPage macro: ${e.message}`);
        }
    }
});

// Custom stat block macro
Macro.add('statBlock', {
    handler: function() {
        if (this.args.length < 1) {
            return this.error('<<statBlock>> requires a stat name argument');
        }
        
        const stat = this.args[0];
        
        if (!State.variables.stats) {
            State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
        }
        
        if (!(stat in State.variables.stats)) {
            State.variables.stats[stat] = 10;
        }
        
        const value = State.variables.stats[stat];
        const modifier = Math.floor((value - 10) / 2);
        const modifierText = (modifier >= 0) ? `+${modifier}` : `${modifier}`;
        
        const output = `
        <div class="stat-block tooltip-trigger" aria-label="${stat.charAt(0).toUpperCase() + stat.slice(1)} stat block">
            <label for="${stat}-value">${stat.charAt(0).toUpperCase() + stat.slice(1)}</label>
            <span id="${stat}-value" aria-live="polite">${value}</span>
            <button id="decrease-${stat}" aria-label="Decrease ${stat}" 
                    ${value <= 8 ? 'disabled aria-disabled="true"' : ''}>-</button>
            <button id="increase-${stat}" aria-label="Increase ${stat}" 
                    ${(State.variables.statPoints <= 0 || value >= 18) ? 'disabled aria-disabled="true"' : ''}>+</button>
            <span id="${stat}-modifier" aria-label="${stat} modifier">${modifierText}</span>
            <div class="tooltip">Base ${stat} score. Modifier shown is ${modifierText}.</div>
        </div>`;
        
        $(this.output).wiki(output);
        
        $(this.output).find(`#increase-${stat}`).on('click', function() {
            if (State.variables.statPoints > 0 && State.variables.stats[stat] < 18) {
                State.variables.stats[stat]++;
                State.variables.statPoints--;
                $(`#${stat}-value`).text(State.variables.stats[stat]);
                const newMod = Math.floor((State.variables.stats[stat] - 10) / 2);
                const newModText = (newMod >= 0) ? `+${newMod}` : `${newMod}`;
                $(`#${stat}-modifier`).text(newModText);
                $('#points-remaining').text(State.variables.statPoints);
                
                if (State.variables.stats[stat] >= 18) {
                    $(this).attr('disabled', true).attr('aria-disabled', 'true');
                }
                $(`#decrease-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                
                if (State.variables.statPoints <= 0) {
                    $('.stat-block button[id^="increase-"]').attr('disabled', true).attr('aria-disabled', 'true');
                }
            }
        });
        
        $(this.output).find(`#decrease-${stat}`).on('click', function() {
            if (State.variables.stats[stat] > 8) {
                State.variables.stats[stat]--;
                State.variables.statPoints++;
                $(`#${stat}-value`).text(State.variables.stats[stat]);
                const newMod = Math.floor((State.variables.stats[stat] - 10) / 2);
                const newModText = (newMod >= 0) ? `+${newMod}` : `${newMod}`;
                $(`#${stat}-modifier`).text(newModText);
                $('#points-remaining').text(State.variables.statPoints);
                
                if (State.variables.stats[stat] <= 8) {
                    $(this).attr('disabled', true).attr('aria-disabled', 'true');
                }
                $(`#increase-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                
                if (State.variables.statPoints > 0) {
                    $('.stat-block button[id^="increase-"]').each(function() {
                        const targetStat = $(this).attr('id').replace('increase-', '');
                        if (State.variables.stats[targetStat] < 18) {
                            $(this).attr('disabled', false).attr('aria-disabled', 'false');
                        }
                    });
                }
            }
        });
    }
});

// Consolidated event handlers
$(document).one(':storyready', function() {
    setup.validateState();
    
    // Initialize accessibility settings
    if (!State.variables.accessibility) {
        State.variables.accessibility = {
            fontSize: settings.fontSize || 'medium',
            highContrast: settings.highContrast || false,
            reduceAnimations: settings.reduceAnimations || false,
            focusHighlight: settings.focusHighlight || false
        };
    }
    
    // Apply accessibility settings
    const html = document.documentElement;
    
    if (settings.fontSize) {
        html.classList.remove('text-small', 'text-medium', 'text-large', 'text-extra-large');
        html.classList.add('text-' + settings.fontSize);
    }
    
    if (settings.highContrast) {
        html.classList.add('high-contrast');
    } else {
        html.classList.remove('high-contrast');
    }
    
    if (settings.reduceAnimations) {
        html.classList.add('reduce-motion');
    } else {
        html.classList.remove('reduce-motion');
    }
    
    if (settings.focusHighlight) {
        html.classList.add('enhanced-focus');
    } else {
        html.classList.remove('enhanced-focus');
    }
    
    // Add skip to content link
    if ($('#skip-to-content').length === 0) {
        $('body').prepend('<a id="skip-to-content" href="#passages">Skip to content</a>');
    }
});

$(document).on(':passagestart', function(ev) {
    setup.validateNavigation(ev.passage.title);
});

$(document).on(':passagerender', function() {
    setup.initUI();
    
    // Scroll to top on new passage
    $("#passages").scrollTop(0);
});

// Accessibility settings
Setting.addHeader("Accessibility", "Options to improve game accessibility");

Setting.addList("fontSize", {
    label: "Text Size",
    desc: "Adjust the size of text throughout the game",
    list: ["small", "medium", "large", "extra-large"],
    default: "medium",
    onInit: function() {
        $('html').removeClass('text-small text-medium text-large text-extra-large')
                .addClass('text-' + settings.fontSize);
    },
    onChange: function() {
        $('html').removeClass('text-small text-medium text-large text-extra-large')
                .addClass('text-' + settings.fontSize);
    }
});

Setting.addToggle("highContrast", {
    label: "High Contrast Mode",
    desc: "Increases contrast for better readability",
    default: false,
    onInit: function() {
        if (settings.highContrast) {
            $('html').addClass('high-contrast');
        } else {
            $('html').removeClass('high-contrast');
        }
    },
    onChange: function() {
        if (settings.highContrast) {
            $('html').addClass('high-contrast');
        } else {
            $('html').removeClass('high-contrast');
        }
    }
});

Setting.addToggle("reduceAnimations", {
    label: "Reduce Animations",
    desc: "Minimises or removes animations that may cause discomfort",
    default: false,
    onInit: function() {
        if (settings.reduceAnimations) {
            $('html').addClass('reduce-animations');
        } else {
            $('html').removeClass('reduce-animations');
        }
    },
    onChange: function() {
        if (settings.reduceAnimations) {
            $('html').addClass('reduce-animations');
        } else {
            $('html').removeClass('reduce-animations');
        }
    }
});

Setting.addToggle("focusHighlight", {
    label: "Enhanced Focus Indicators",
    desc: "Makes it easier to see which element is currently focused",
    default: false,
    onInit: function() {
        if (settings.focusHighlight) {
            $('html').addClass('enhanced-focus');
        } else {
            $('html').removeClass('enhanced-focus');
        }
    },
    onChange: function() {
        if (settings.focusHighlight) {
            $('html').addClass('enhanced-focus');
        } else {
            $('html').removeClass('enhanced-focus');
        }
    }
});
