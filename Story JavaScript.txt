// JavaScript passage cleanup
// This should go in your Story JavaScript area

// Initialize story variables
Config.history.maxStates = 10;

// Character creation state management
setup.characterDefaults = {
    name: "",
    race: "",
    background: "",
    backgroundDesc: "",
    class: "",
    classDesc: "",
    pronouns: "",
    statPoints: 10,
    validName: false,
    appliedBackgroundBonus: false,
    stats: {
        strength: 10,
        dexterity: 10,
        intelligence: 10,
        charisma: 10
    }
};

// Central error handler
setup.handleError = function(context, error) {
    console.error(`Error in ${context}:`, error);
    if (Config.debug) {
        UI.alert(`Error in ${context}: ${error.message}`);
    }
    return false; // Return a value for function chaining
};

// Debounce function for event handling
setup.debounce = function(func, wait) {
    let timeout;
    return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), wait);
    };
};

// Initialize or validate character state
setup.validateProgressionState = function() {
    try {
        // Initialize character variables if they don't exist
        for (const [key, value] of Object.entries(setup.characterDefaults)) {
            if (State.variables[key] === undefined) {
                if (typeof value === 'object' && value !== null) {
                    State.variables[key] = jQuery.extend(true, {}, value);
                } else {
                    State.variables[key] = value;
                }
            }
        }
        return true;
    } catch (e) {
        return setup.handleError("validateProgressionState", e);
    }
};

// Name validation with special character restrictions
setup.validateName = function(name) {
    try {
        if (!name) return "Please enter a name.";
        if (name.trim().length < 2) return "Name must be at least 2 characters long.";
        if (name.length > 20) return "Name must be less than 20 characters.";
        if (!/^[a-zA-Z\s'-]+$/.test(name)) return "Name can only contain letters, spaces, hyphens and apostrophes.";
        return null;
    } catch (e) {
        setup.handleError("validateName", e);
        return "Error validating name.";
    }
};

// Point-buy system functions
setup.increaseStat = function(stat) {
    try {
        if (!State.variables.stats) {
            State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
        }
        
        if (State.variables.statPoints > 0 && State.variables.stats[stat] < 18) {
            State.variables.stats[stat]++;
            State.variables.statPoints--;
            setup.updateStatDisplay();
            return true;
        }
        return false;
    } catch (e) {
        return setup.handleError("increaseStat", e);
    }
};

setup.decreaseStat = function(stat) {
    try {
        if (!State.variables.stats) {
            State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
            return false;
        }
        
        if (State.variables.stats[stat] > 8) {
            State.variables.stats[stat]--;
            State.variables.statPoints++;
            setup.updateStatDisplay();
            return true;
        }
        return false;
    } catch (e) {
        return setup.handleError("decreaseStat", e);
    }
};

setup.updateStatDisplay = function() {
    try {
        if ($('#points-remaining').length) {
            $('#points-remaining').text(State.variables.statPoints);
        }
        
        if (State.variables.stats) {
            for (let stat in State.variables.stats) {
                if ($(`#${stat}-value`).length) {
                    $(`#${stat}-value`).text(State.variables.stats[stat]);
                    
                    const modifier = Math.floor((State.variables.stats[stat] - 10) / 2);
                    const modText = modifier >= 0 ? `+${modifier}` : modifier;
                    
                    if ($(`#${stat}-modifier`).length) {
                        $(`#${stat}-modifier`).text(modText);
                    }
                    
                    // Update button states
                    if (State.variables.stats[stat] <= 8) {
                        $(`#decrease-${stat}`).attr('disabled', true).attr('aria-disabled', 'true');
                    } else {
                        $(`#decrease-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    }
                    
                    if (State.variables.stats[stat] >= 18 || State.variables.statPoints <= 0) {
                        $(`#increase-${stat}`).attr('disabled', true).attr('aria-disabled', 'true');
                    } else {
                        $(`#increase-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    }
                }
            }
        }
        return true;
    } catch (e) {
        console.error("Error in updateStatDisplay:", e);
        return false;
    }
};

// Name suggestion system
setup.namePatterns = {
    noble: ["Aldrich", "Blackwood", "Constantine", "Devereux", "Highwind", "Ravencrest", "Sterling", "Wintervale"],
    scholar: ["Archibald", "Benedict", "Cornelius", "Thaddeus", "Grimoire", "Lightweaver", "Sage", "Wisewater"],
    thief: ["Raven", "Shadow", "Swift", "Whisper", "Dagger", "Nightshade", "Silentfoot", "Vex"],
    mercenary: ["Axe", "Blade", "Hunter", "Steel", "Ironclad", "Redsteel", "Stormfist", "Warhawk"],
    outcast: ["Exile", "Lost", "Nameless", "Wraith", "Cipher", "Ghostwalker", "None", "Void"],
    augmented: ["Chrome", "Nexus", "Prime", "Vector", "Cypher", "Matrix", "Surge", "Zero"],
    streetrat: ["Rat", "Scrapper", "Spark", "Wire", "Gutter", "Junk", "Rust", "Scrap"],
    cultist: ["Cipher", "Devotee", "Oracle", "Seeker", "Darkwhisper", "Mindweaver", "Truthseeker", "Voidcaller"],
    wanderer: ["Drift", "Roam", "Storm", "Wind", "Dustwalker", "Pathfinder", "Stormchaser", "Wayfarer"],
    corporate: ["Ash", "Frost", "Pierce", "Vale", "Diamond", "Goldweaver", "Platinumhand", "Silversmith"]
};

setup.suggestName = function(type) {
    try {
        if (setup.namePatterns[type]) {
            let names = setup.namePatterns[type];
            return names[Math.floor(Math.random() * names.length)];
        }
        return "Unknown Type";
    } catch (e) {
        setup.handleError("suggestName", e);
        return "Error";
    }
};

// UI Initialization functions
setup.initTooltips = function() {
    try {
        $('.tooltip-trigger').off('mouseenter mouseleave');
        $('.tooltip-trigger').hover(
            function() {
                $(this).find('.tooltip').fadeIn(200);
            },
            function() {
                $(this).find('.tooltip').fadeOut(200);
            }
        );
        return true;
    } catch (e) {
        return setup.handleError("initTooltips", e);
    }
};

// Background selection with bonus stat calculations
setup.selectBackground = function(background) {
    try {
        if (!State.variables.stats) {
            State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
        }
        
        State.variables.background = background;
        
        // Only apply bonuses if they haven't been applied yet
        if (!State.variables.appliedBackgroundBonus) {
            switch(background) {
                case "Noble":
                    State.variables.stats.charisma += 2;
                    break;
                case "Scholar":
                    State.variables.stats.intelligence += 2;
                    break;
                case "Thief":
                    State.variables.stats.dexterity += 2;
                    break;
                case "Mercenary":
                    State.variables.stats.strength += 2;
                    break;
                case "Outcast":
                    State.variables.stats.intelligence += 1;
                    State.variables.stats.charisma += 1;
                    break;
                case "Augmented":
                    State.variables.stats.strength += 1;
                    State.variables.stats.dexterity += 1;
                    break;
                case "Street Rat":
                    State.variables.stats.dexterity += 1;
                    State.variables.stats.intelligence += 1;
                    break;
                case "Cultist":
                    State.variables.stats.intelligence += 1;
                    State.variables.stats.charisma += 1;
                    break;
                case "Wanderer":
                    State.variables.stats.dexterity += 1;
                    State.variables.stats.charisma += 1;
                    break;
                case "Corporate":
                    State.variables.stats.intelligence += 1;
                    State.variables.stats.charisma += 1;
                    break;
            }
            State.variables.appliedBackgroundBonus = true;
        }
        
        setup.updateStatDisplay();
        return true;
    } catch (e) {
        return setup.handleError("selectBackground", e);
    }
};

// Initialize a new character
setup.initializeCharacter = function() {
    try {
        // Reset all character properties to defaults
        for (const [key, value] of Object.entries(setup.characterDefaults)) {
            if (typeof value === 'object' && value !== null) {
                State.variables[key] = jQuery.extend(true, {}, value);
            } else {
                State.variables[key] = value;
            }
        }
        return true;
    } catch (e) {
        setup.handleError("initializeCharacter", e);
        return false;
    }
};

// Custom macro for character stat blocks in the point-buy system
Macro.add('statBlock', {
    handler: function() {
        try {
            if (this.args.length < 1) {
                return this.error('The <<statBlock>> macro requires a stat name as an argument');
            }
            
            const stat = this.args[0];
            
            // Ensure stats are initialized
            if (!State.variables.stats) {
                State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
            }
            
            // If the requested stat doesn't exist yet, initialise it
            if (!(stat in State.variables.stats)) {
                State.variables.stats[stat] = 10;
            }
            
            const value = State.variables.stats[stat];
            const modifier = Math.floor((value - 10) / 2);
            const modifierText = (modifier >= 0) ? `+${modifier}` : `${modifier}`;
            
            // Use SugarCube's event handling approach instead of direct onclick
            const output = `
            <div class="stat-block tooltip-trigger" aria-label="${stat.charAt(0).toUpperCase() + stat.slice(1)} stat block">
                <label for="${stat}-value">${stat.charAt(0).toUpperCase() + stat.slice(1)}</label>
                <span id="${stat}-value" aria-live="polite">${value}</span>
                <button id="decrease-${stat}" aria-label="Decrease ${stat}" 
                        ${value <= 8 ? 'disabled aria-disabled="true"' : ''}>-</button>
                <button id="increase-${stat}" aria-label="Increase ${stat}" 
                        ${(State.variables.statPoints <= 0 || value >= 18) ? 'disabled aria-disabled="true"' : ''}>+</button>
                <span id="${stat}-modifier" aria-label="${stat} modifier">${modifierText}</span>
                <div class="tooltip">Base ${stat} score. Modifier shown is ${modifierText}.</div>
            </div>`;
            
            $(this.output).wiki(output);
            
            // Attach event handlers *after* adding to DOM
            $(this.output).find(`#increase-${stat}`).on('click', function() {
                if (State.variables.statPoints > 0 && State.variables.stats[stat] < 18) {
                    State.variables.stats[stat]++;
                    State.variables.statPoints--;
                    // Update display
                    $(`#${stat}-value`).text(State.variables.stats[stat]);
                    const newMod = Math.floor((State.variables.stats[stat] - 10) / 2);
                    const newModText = (newMod >= 0) ? `+${newMod}` : `${newMod}`;
                    $(`#${stat}-modifier`).text(newModText);
                    $('#points-remaining').text(State.variables.statPoints);
                    
                    // Update button states
                    if (State.variables.stats[stat] >= 18) {
                        $(this).attr('disabled', true).attr('aria-disabled', 'true');
                    }
                    $(`#decrease-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    
                    if (State.variables.statPoints <= 0) {
                        $('.stat-block button[id^="increase-"]').attr('disabled', true).attr('aria-disabled', 'true');
                    }
                }
            });
            
            $(this.output).find(`#decrease-${stat}`).on('click', function() {
                if (State.variables.stats[stat] > 8) {
                    State.variables.stats[stat]--;
                    State.variables.statPoints++;
                    // Update display
                    $(`#${stat}-value`).text(State.variables.stats[stat]);
                    const newMod = Math.floor((State.variables.stats[stat] - 10) / 2);
                    const newModText = (newMod >= 0) ? `+${newMod}` : `${newMod}`;
                    $(`#${stat}-modifier`).text(newModText);
                    $('#points-remaining').text(State.variables.statPoints);
                    
                    // Update button states
                    if (State.variables.stats[stat] <= 8) {
                        $(this).attr('disabled', true).attr('aria-disabled', 'true');
                    }
                    $(`#increase-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    
                    if (State.variables.statPoints > 0) {
                        $('.stat-block button[id^="increase-"]').each(function() {
                            const targetStat = $(this).attr('id').replace('increase-', '');
                            if (State.variables.stats[targetStat] < 18) {
                                $(this).attr('disabled', false).attr('aria-disabled', 'false');
                            }
                        });
                    }
                }
            });
        } catch (e) {
            return this.error(`Error in statBlock macro: ${e.message}`);
        }
    }
});

// Event handlers - Story startup
$(document).one(':storyready', function() {
    // Initialize character state
    setup.validateProgressionState();
});

// Create settings for accessibility options
Setting.addHeader("Accessibility", "Options to improve game accessibility");

Setting.addList("fontSize", {
    label: "Text Size",
    desc: "Change the size of text throughout the game",
    list: ["small", "medium", "large", "extra-large"],
    default: "medium"
});

Setting.addToggle("highContrast", {
    label: "High Contrast Mode",
    desc: "Increases contrast for better readability",
    default: false
});

Setting.addToggle("reduceAnimations", {
    label: "Reduce Animations",
    desc: "Minimizes or removes animations that may cause discomfort",
    default: false
});
// ----- ARIA and Screen Reader Improvements -----

// Enhanced screen reader support for character creation steps
$(document).on(":passagerender", function() {
    // Add proper ARIA roles and labels to all interactive elements
    $('.creation-progress').attr('role', 'progressbar')
        .attr('aria-valuemin', '1')
        .attr('aria-valuemax', '6');
    
    // Set current progress step based on active class
    const activeStepIndex = $('.progress-step.active').index() + 1;
    const totalSteps = $('.progress-step').length;
    
    $('.creation-progress').attr('aria-valuenow', activeStepIndex)
        .attr('aria-valuetext', 'Step ' + activeStepIndex + ' of ' + totalSteps);
    
    // Add descriptive ARIA labels to all selection options
    $('.class-option button, .pixel-art-container').each(function() {
        const optionText = $(this).text().trim();
        const descriptionEl = $(this).closest('.class-option').find('p');
        const description = descriptionEl.length ? descriptionEl.text().trim() : '';
        
        $(this).attr('aria-label', optionText + (description ? ': ' + description : ''));
    });
    
    // Make sure all form controls have proper labels
    $('input:not([aria-label]), textarea:not([aria-label])').each(function() {
        const id = $(this).attr('id');
        const labelEl = $('label[for="' + id + '"]');
        
        if (!labelEl.length) {
            const placeholderText = $(this).attr('placeholder') || '';
            $(this).attr('aria-label', placeholderText || 'Input field');
        }
    });
    
    // Add live regions for dynamic content
    $('.selected-class-display, #selected-background, #selected-race, #name-error, #pronoun-error')
        .attr('aria-live', 'polite');
});

//  Enhanced keyboard navigation
$(document).on("keydown", function(e) {
    // Add arrow key navigation for selection grids
    if ($('.class-option').length && (e.key === 'ArrowRight' || e.key === 'ArrowLeft' || 
                                     e.key === 'ArrowUp' || e.key === 'ArrowDown')) {
        const focusableElements = $('.class-option button:visible').toArray();
        const currentElement = document.activeElement;
        const currentIndex = focusableElements.indexOf(currentElement);
        
        if (currentIndex !== -1) {
            let newIndex = currentIndex;
            const columns = Math.round(Math.sqrt(focusableElements.length));
            
            switch(e.key) {
                case 'ArrowRight':
                    newIndex = Math.min(focusableElements.length - 1, currentIndex + 1);
                    break;
                case 'ArrowLeft':
                    newIndex = Math.max(0, currentIndex - 1);
                    break;
                case 'ArrowDown':
                    newIndex = Math.min(focusableElements.length - 1, currentIndex + columns);
                    break;
                case 'ArrowUp':
                    newIndex = Math.max(0, currentIndex - columns);
                    break;
            }
            
            if (newIndex !== currentIndex && focusableElements[newIndex]) {
                focusableElements[newIndex].focus();
                e.preventDefault();
            }
        }
    }
    
    // Add 'Enter' key support for elements with role="button"
    if (e.key === 'Enter') {
        const el = document.activeElement;
        if (el && el.getAttribute('role') === 'button' && !el.disabled) {
            el.click();
            e.preventDefault();
        }
    }
});

//  Skip navigation for keyboard users
$('#passages').prepend(`
    <a href="#main-content" id="skip-to-content" class="visually-hidden">Skip to main content</a>
`);

// Add main content identifier
$(document).on(":passagerender", function() {
    // Add id to main content area if not already present
    if ($('#main-content').length === 0) {
        $('.passage > :first-child').attr('id', 'main-content');
    }
});

// 4. Improve focus visibility
$('head').append(`
    <style>
        /* Enhanced focus styles */
        *:focus {
            outline: 3px solid #FF6B6B !important;
            outline-offset: 3px !important;
        }
        
        /* Skip link styling */
        .visually-hidden {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
        
        .visually-hidden:focus {
            position: fixed;
            top: 0;
            left: 0;
            width: auto;
            height: auto;
            padding: 10px;
            margin: 10px;
            background: #1A1B23;
            color: #00FFBB;
            z-index: 9999;
            overflow: visible;
            clip: auto;
            white-space: normal;
            text-decoration: none;
            border: 2px solid #00FFBB;
        }
    </style>
`);

// 5. Modify the existing font size control instead of creating a new one
// We don't need to re-add the setting, just ensure the CSS classes are applied

// Apply font size changes (use with existing setting)
function applyFontSize(size) {
    $('html').removeClass('text-small text-normal text-large text-x-large')
             .addClass('text-' + size);
}

// High contrast mode - only add if it doesn't exist
if (typeof settings.highContrast === 'undefined') {
    Setting.addToggle("highContrast", {
        label: "High Contrast Mode",
        desc: "Increases contrast for better visibility",
        default: false,
        onInit: function() {
            applyContrastMode(settings.highContrast);
        },
        onChange: function() {
            applyContrastMode(settings.highContrast);
        }
    });
}

// Apply contrast mode changes
function applyContrastMode(enabled) {
    if (enabled) {
        $('html').addClass('high-contrast');
    } else {
        $('html').removeClass('high-contrast');
    }
}

// Motion reduction - only add if it doesn't exist
if (typeof settings.reduceMotion === 'undefined') {
    Setting.addToggle("reduceMotion", {
        label: "Reduce Motion",
        desc: "Decreases or removes animations",
        default: false,
        onInit: function() {
            applyReduceMotion(settings.reduceMotion);
        },
        onChange: function() {
            applyReduceMotion(settings.reduceMotion);
        }
    });
}

// Apply motion reduction
function applyReduceMotion(enabled) {
    if (enabled) {
        $('html').addClass('reduce-motion');
    } else {
        $('html').removeClass('reduce-motion');
    }
}

// 6. Add CSS for accessibility modes
$('head').append(`
    <style>
        /* Font size classes */
        html.text-small {
            font-size: 14px;
        }
        
        html.text-normal {
            font-size: 16px;
        }
        
        html.text-large {
            font-size: 18px;
        }
        
        html.text-x-large {
            font-size: 20px;
        }
        
        /* High contrast mode */
        html.high-contrast {
            --neon-primary: #00FF00;
            --neon-secondary: #FF0000;
            --dark-primary: #000000;
            --dark-secondary: #0A0A0A;
            color: #FFFFFF;
        }
        
        html.high-contrast button,
        html.high-contrast a {
            color: #FFFFFF;
            border-color: #FFFFFF;
            background-color: #000000;
        }
        
        html.high-contrast .class-option,
        html.high-contrast .stat-block,
        html.high-contrast .name-entry,
        html.high-contrast .pronoun-selection {
            background-color: #000000;
            border-color: #FFFFFF;
        }
        
        /* Reduce motion */
        html.reduce-motion * {
            animation-duration: 0.001s !important;
            transition-duration: 0.001s !important;
        }
    </style>
`);

//  Add tooltip accessibility enhancements
$(document).on(":passagerender", function() {
    $('.tooltip-trigger').each(function() {
        const tooltip = $(this).find('.tooltip');
        if (tooltip.length) {
            // If tooltip exists, set up ARIA attributes
            const id = 'tooltip-' + Math.random().toString(36).substring(2, 10);
            tooltip.attr('id', id)
                   .attr('role', 'tooltip')
                   .attr('aria-hidden', 'true');
            
            $(this).attr('aria-describedby', id);
            
            // Toggle tooltip visibility
            $(this).on('mouseenter focus', function() {
                tooltip.attr('aria-hidden', 'false');
            }).on('mouseleave blur', function() {
                tooltip.attr('aria-hidden', 'true');
            });
        }
    });
});

//  Add ARIA to stat blocks
$(document).on(":passagerender", function() {
    $('.stat-block').each(function() {
        const valueEl = $(this).find('[id$="-value"]');
        const modifierEl = $(this).find('[id$="-modifier"]');
        
        if (valueEl.length) {
            const statName = valueEl.attr('id').replace('-value', '');
            $(this).attr('role', 'group')
                   .attr('aria-label', statName + ' attribute');
            
            // Announce changes to the value
            const increaseBtn = $(this).find('[id^="increase-"]');
            const decreaseBtn = $(this).find('[id^="decrease-"]');
            
            increaseBtn.attr('aria-label', 'Increase ' + statName);
            decreaseBtn.attr('aria-label', 'Decrease ' + statName);
            
            valueEl.attr('aria-live', 'polite')
                   .attr('role', 'status');
            
            if (modifierEl.length) {
                modifierEl.attr('aria-live', 'polite')
                          .attr('role', 'status');
            }
        }
    });
});

// Add accessibility button to UI
$(document).one(":passagestart", function() {
    if ($('#accessibility-button').length === 0) {
        $('#ui-bar').find('#ui-bar-toggle').after(`
            <button id="accessibility-button" aria-label="Accessibility Settings" title="Accessibility Settings">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                    <path d="M12 5V19" stroke="currentColor" stroke-width="2"/>
                    <path d="M5 12H19" stroke="currentColor" stroke-width="2"/>
                </svg>
            </button>
        `);
        
        $('#accessibility-button').on('click', function() {
            UI.settings();
        });
    }
});

// Add CSS for accessibility button
$('head').append(`
    <style>
        #accessibility-button {
            padding: 0.5em;
            background: transparent;
            border: none;
            color: inherit;
            cursor: pointer;
        }
        
        #accessibility-button:hover {
            background: rgba(255, 255, 255, 0.1);
        }
    </style>
`);

// Add descriptive help text for form inputs
$(document).on(":passagerender", function() {
    // Add descriptive text for name field
    if ($('#name-box').length && !$('#name-help-text').length) {
        $('#name-box').after(`
            <div id="name-help-text" class="help-text">
                Enter a name for your character. Name should be 2-20 characters long and may include letters, spaces, hyphens, and apostrophes.
            </div>
        `);
        
        // Connect help text to input with aria-describedby
        $('#name-box input').attr('aria-describedby', 'name-help-text');
    }
    
    // Add help text for stat distribution
    if ($('.stat-distribution').length && !$('#stat-help-text').length) {
        $('.points-remaining').after(`
            <div id="stat-help-text" class="help-text">
                Distribute your attribute points. Higher values give better chances at related skills. You must spend all points before continuing.
            </div>
        `);
    }
});

// Add CSS for help text
$('head').append(`
    <style>
        .help-text {
            font-size: 0.9em;
            margin: 0.5em 0 1em;
            color: #ccc;
        }
        
        html.high-contrast .help-text {
            color: #FFFFFF;
        }
    </style>
`);
