
// Initialize story variables
Config.history.maxStates = 10;

// Character creation state management
setup.characterDefaults = {
    name: "",
    race: "",
    background: "",
    backgroundDesc: "",
    class: "",
    classDesc: "",
    pronouns: "",
    statPoints: 10,
    validName: false,
    appliedBackgroundBonus: false,
    stats: {
        strength: 10,
        dexterity: 10,
        intelligence: 10,
        charisma: 10
    }
};

// Central error handler
setup.handleError = function(context, error) {
    console.error(`Error in ${context}:`, error);
    if (Config.debug) {
        UI.alert(`Error in ${context}: ${error.message}`);
    }
    return false; // Return a value for function chaining
};

// Debounce function for event handling
setup.debounce = function(func, wait) {
    let timeout;
    return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), wait);
    };
};

// Initialize or validate character state
setup.validateProgressionState = function() {
    try {
        // Initialize character variables if they don't exist
        for (const [key, value] of Object.entries(setup.characterDefaults)) {
            if (State.variables[key] === undefined) {
                if (typeof value === 'object' && value !== null) {
                    State.variables[key] = jQuery.extend(true, {}, value);
                } else {
                    State.variables[key] = value;
                }
            }
        }
        return true;
    } catch (e) {
        return setup.handleError("validateProgressionState", e);
    }
};

// Validate passage navigation based on creation progression
setup.validatePassageNavigation = function(currentPassage) {
    try {
        // Creation progression order
        const progressionOrder = [
            "Name and Pronouns",
            "Race Selection",
            "Background Selection",
            "Class Selection",
            "Primary Stat Selection",
            "Character Summary",
            "Creation Complete"
        ];
        
        // Determine current step index
        const currentIndex = progressionOrder.indexOf(currentPassage);
        
        // If we're not in the progression, don't validate
        if (currentIndex === -1) return true;
        
        // Check if requirements for current step are met
        switch(currentPassage) {
            case "Race Selection":
                if (!State.variables.name || !State.variables.pronouns) {
                    Engine.play("Name and Pronouns");
                    return false;
                }
                break;
                
            case "Background Selection":
                if (!State.variables.race) {
                    Engine.play("Race Selection");
                    return false;
                }
                break;
                
            case "Class Selection":
                if (!State.variables.background) {
                    Engine.play("Background Selection");
                    return false;
                }
                break;
                
            case "Primary Stat Selection":
                if (!State.variables.class) {
                    Engine.play("Class Selection");
                    return false;
                }
                break;
                
            case "Character Summary":
                if (State.variables.statPoints !== 0) {
                    Engine.play("Primary Stat Selection");
                    return false;
                }
                break;
                
            case "Creation Complete":
                if (!State.variables.name || !State.variables.race || 
                    !State.variables.background || !State.variables.class || 
                    State.variables.statPoints !== 0) {
                    Engine.play("Character Summary");
                    return false;
                }
                break;
        }
        
        return true;
    } catch (e) {
        setup.handleError("validatePassageNavigation", e);
        return true; // Default to allowing navigation on error
    }
};

// Name validation with special character restrictions
setup.validateName = function(name) {
    try {
        if (!name) return "Please enter a name.";
        if (name.trim().length < 2) return "Name must be at least 2 characters long.";
        if (name.length > 20) return "Name must be less than 20 characters.";
        if (!/^[a-zA-Z\s'-]+$/.test(name)) return "Name can only contain letters, spaces, hyphens and apostrophes.";
        return null;
    } catch (e) {
        setup.handleError("validateName", e);
        return "Error validating name.";
    }
};

// Point-buy system functions
setup.increaseStat = function(stat) {
    try {
        if (!State.variables.stats) {
            State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
        }
        
        if (State.variables.statPoints > 0 && State.variables.stats[stat] < 18) {
            State.variables.stats[stat]++;
            State.variables.statPoints--;
            setup.updateStatDisplay();
            return true;
        }
        return false;
    } catch (e) {
        return setup.handleError("increaseStat", e);
    }
};

setup.decreaseStat = function(stat) {
    try {
        if (!State.variables.stats) {
            State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
            return false;
        }
        
        if (State.variables.stats[stat] > 8) {
            State.variables.stats[stat]--;
            State.variables.statPoints++;
            setup.updateStatDisplay();
            return true;
        }
        return false;
    } catch (e) {
        return setup.handleError("decreaseStat", e);
    }
};

setup.updateStatDisplay = function() {
    try {
        if ($('#points-remaining').length) {
            $('#points-remaining').text(State.variables.statPoints);
        }
        
        if (State.variables.stats) {
            for (let stat in State.variables.stats) {
                if ($(`#${stat}-value`).length) {
                    $(`#${stat}-value`).text(State.variables.stats[stat]);
                    
                    const modifier = Math.floor((State.variables.stats[stat] - 10) / 2);
                    const modText = modifier >= 0 ? `+${modifier}` : modifier;
                    
                    if ($(`#${stat}-modifier`).length) {
                        $(`#${stat}-modifier`).text(modText);
                    }
                    
                    // Update button states
                    if (State.variables.stats[stat] <= 8) {
                        $(`#decrease-${stat}`).attr('disabled', true).attr('aria-disabled', 'true');
                    } else {
                        $(`#decrease-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    }
                    
                    if (State.variables.stats[stat] >= 18 || State.variables.statPoints <= 0) {
                        $(`#increase-${stat}`).attr('disabled', true).attr('aria-disabled', 'true');
                    } else {
                        $(`#increase-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    }
                }
            }
        }
        return true;
    } catch (e) {
        console.error("Error in updateStatDisplay:", e);
        return false;
    }
};

// Name suggestion system
setup.namePatterns = {
    noble: ["Aldrich", "Blackwood", "Constantine", "Devereux", "Highwind", "Ravencrest", "Sterling", "Wintervale"],
    scholar: ["Archibald", "Benedict", "Cornelius", "Thaddeus", "Grimoire", "Lightweaver", "Sage", "Wisewater"],
    thief: ["Raven", "Shadow", "Swift", "Whisper", "Dagger", "Nightshade", "Silentfoot", "Vex"],
    mercenary: ["Axe", "Blade", "Hunter", "Steel", "Ironclad", "Redsteel", "Stormfist", "Warhawk"],
    outcast: ["Exile", "Lost", "Nameless", "Wraith", "Cipher", "Ghostwalker", "None", "Void"],
    augmented: ["Chrome", "Nexus", "Prime", "Vector", "Cypher", "Matrix", "Surge", "Zero"],
    streetrat: ["Rat", "Scrapper", "Spark", "Wire", "Gutter", "Junk", "Rust", "Scrap"],
    cultist: ["Cipher", "Devotee", "Oracle", "Seeker", "Darkwhisper", "Mindweaver", "Truthseeker", "Voidcaller"],
    wanderer: ["Drift", "Roam", "Storm", "Wind", "Dustwalker", "Pathfinder", "Stormchaser", "Wayfarer"],
    corporate: ["Ash", "Frost", "Pierce", "Vale", "Diamond", "Goldweaver", "Platinumhand", "Silversmith"]
};

setup.suggestName = function(type) {
    try {
        if (setup.namePatterns[type]) {
            let names = setup.namePatterns[type];
            return names[Math.floor(Math.random() * names.length)];
        }
        return "Unknown Type";
    } catch (e) {
        setup.handleError("suggestName", e);
        return "Error";
    }
};

// UI Initialization functions
setup.initTooltips = function() {
    try {
        $('.tooltip-trigger').off('mouseenter mouseleave');
        $('.tooltip-trigger').hover(
            function() {
                $(this).find('.tooltip').fadeIn(200);
            },
            function() {
                $(this).find('.tooltip').fadeOut(200);
            }
        );
        return true;
    } catch (e) {
        return setup.handleError("initTooltips", e);
    }
};

// Background selection with bonus stat calculations
setup.selectBackground = function(background) {
    try {
        if (!State.variables.stats) {
            State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
        }
        
        State.variables.background = background;
        
        // Only apply bonuses if they haven't been applied yet
        if (!State.variables.appliedBackgroundBonus) {
            switch(background) {
                case "Noble":
                    State.variables.stats.charisma += 2;
                    break;
                case "Scholar":
                    State.variables.stats.intelligence += 2;
                    break;
                case "Thief":
                    State.variables.stats.dexterity += 2;
                    break;
                case "Mercenary":
                    State.variables.stats.strength += 2;
                    break;
                case "Outcast":
                    State.variables.stats.intelligence += 1;
                    State.variables.stats.charisma += 1;
                    break;
                case "Augmented":
                    State.variables.stats.strength += 1;
                    State.variables.stats.dexterity += 1;
                    break;
                case "Street Rat":
                    State.variables.stats.dexterity += 1;
                    State.variables.stats.intelligence += 1;
                    break;
                case "Cultist":
                    State.variables.stats.intelligence += 1;
                    State.variables.stats.charisma += 1;
                    break;
                case "Wanderer":
                    State.variables.stats.dexterity += 1;
                    State.variables.stats.charisma += 1;
                    break;
                case "Corporate":
                    State.variables.stats.intelligence += 1;
                    State.variables.stats.charisma += 1;
                    break;
            }
            State.variables.appliedBackgroundBonus = true;
        }
        
        setup.updateStatDisplay();
        return true;
    } catch (e) {
        return setup.handleError("selectBackground", e);
    }
};

// Initialize event handlers when a new passage renders
setup.initNavigation = function() {
    try {
        // Set up data-passage links
        $('[data-passage]').off('click.navigation').on('click.navigation', function(event) {
            event.preventDefault();
            const passage = $(this).data('passage');
            if (passage) {
                // Check if this is a next button that should be disabled
                if ($(this).hasClass('next-button') && $(this).parent().find('.disabled-next').length > 0) {
                    return false;
                }
                Engine.play(passage);
            }
            return false;
        });
        return true;
    } catch (e) {
        return setup.handleError("initNavigation", e);
    }
};

// Initialize smooth scrolling for details panels
setup.initSmoothScrolling = function() {
    try {
        $('button[data-select]').off('click.smooth-scroll').on('click.smooth-scroll', function() {
            const detailsPanel = document.querySelector('.details-panel');
            if (detailsPanel) {
                setTimeout(function() {
                    detailsPanel.scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'nearest' 
                    });
                }, 100);
            }
        });
        return true;
    } catch (e) {
        return setup.handleError("initSmoothScrolling", e);
    }
};

// Card selection highlight
setup.initCardSelection = function() {
    try {
        $('.selection-card button').off('click.card-selection').on('click.card-selection', function() {
            $('.selection-card').removeClass('selected');
            $(this).closest('.selection-card').addClass('selected');
        });
        return true;
    } catch (e) {
        return setup.handleError("initCardSelection", e);
    }
};

// Race selection navigation
setup.selectRace = function(race) {
    try {
        State.variables.race = race;
        Engine.play("Background Selection");
        return true;
    } catch (e) {
        return setup.handleError("selectRace", e);
    }
};

// Validate name and continue to next step
setup.validateNameAndContinue = function() {
    try {
        const nameError = setup.validateName(State.variables.tempName);
        
        if (nameError) {
            if ($('#name-error').length) {
                $('#name-error').text(nameError).show();
            }
            return false;
        }
        
        // Check pronouns
        if (!State.variables.pronouns) {
            if ($('#pronoun-error').length) {
                $('#pronoun-error').text("Please select your pronouns.").show();
            }
            return false;
        }
        
        // Set the validated name and move forward
        State.variables.name = State.variables.tempName;
        State.variables.validName = true;
        Engine.play("Race Selection");
        return true;
    } catch (e) {
        return setup.handleError("validateNameAndContinue", e);
    }
};

// Add screen reader ARIA attributes
setup.addScreenReaderDescriptions = function() {
    try {
        // Add role for screen readers
        $('.background-option, .class-option')
            .attr('role', 'group')
            .attr('aria-label', function() {
                return $(this).find('button').first().text().trim() + ' option';
            });
        
        // Add descriptions to background options
        $('.background-option button, .class-option button').each(function() {
            const optionName = $(this).text().trim();
            const description = $(this).closest('.background-option, .class-option')
                                      .find('p').first().text().trim() || '';
            
            $(this).attr('aria-label', `Select ${optionName}: ${description.substring(0, 100)}...`);
        });
        
        // Add descriptions to name suggestion buttons
        $('.suggestion-buttons button').attr('aria-label', function() {
            return `Suggest ${$(this).text()} for your character`;
        });
        
        // Add labels to race selection buttons
        $('[data-race]').each(function() {
            const raceName = $(this).attr('data-race');
            const description = $(this).closest('li').find('p').first().text().trim() || '';
            $(this).attr('aria-label', `Select ${raceName}: ${description.substring(0, 100)}...`);
        });
        
        // Add ARIA live regions
        $('.selected-class-display, #selected-race, #selected-background, #selected-class')
            .attr('aria-live', 'polite');
            
        return true;
    } catch (e) {
        return setup.handleError("addScreenReaderDescriptions", e);
    }
};

// Function to make elements properly focusable
setup.makeElementsFocusable = function() {
    try {
        // Ensure buttons are focusable with keyboard
        $('button:not([tabindex]), a:not([tabindex]), [role="button"]:not([tabindex])')
            .attr('tabindex', '0');
        
        // Make sure disabled buttons are appropriately marked
        $('.disabled-button, button[disabled]')
            .attr('aria-disabled', 'true')
            .attr('tabindex', '-1');
            
        // Ensure proper focus indication for interactive elements
        $('button, a, [role="button"]').each(function() {
            if (!$(this).css('outline') || $(this).css('outline') === 'none') {
                $(this).css('outline-offset', '2px');
            }
        });
        
        return true;
    } catch (e) {
        return setup.handleError("makeElementsFocusable", e);
    }
};

// Adjust layout for screen size
setup.adjustLayoutForScreenSize = function() {
    try {
        const isMobile = window.innerWidth < 768;
        
        if (isMobile) {
            $('.selection-grid, .class-options').addClass('mobile-layout');
            $('body').addClass('mobile-view');
        } else {
            $('.selection-grid, .class-options').removeClass('mobile-layout');
            $('body').removeClass('mobile-view');
        }
        
        // Adjust font size based on screen width
        if (window.innerWidth < 480) {
            $('html').addClass('small-screen');
        } else {
            $('html').removeClass('small-screen');
        }
        
        return true;
    } catch (e) {
        return setup.handleError("adjustLayoutForScreenSize", e);
    }
};

// Combine all UI initialisation
setup.initializeUI = function() {
    try {
        setup.initTooltips();
        setup.updateStatDisplay();
        setup.initNavigation();
        setup.initSmoothScrolling();
        setup.initCardSelection();
        setup.addScreenReaderDescriptions();
        setup.makeElementsFocusable();
        
        return true;
    } catch (e) {
        return setup.handleError("initializeUI", e);
    }
};

// Initialize a new character
setup.initializeCharacter = function() {
    try {
        // Reset all character properties to defaults
        for (const [key, value] of Object.entries(setup.characterDefaults)) {
            if (typeof value === 'object' && value !== null) {
                State.variables[key] = jQuery.extend(true, {}, value);
            } else {
                State.variables[key] = value;
            }
        }
        return true;
    } catch (e) {
        setup.handleError("initializeCharacter", e);
        return false;
    }
};

// Confirm restart to prevent accidental data loss
setup.confirmRestart = function() {
    try {
        if (State.variables.name || State.variables.race || State.variables.background || State.variables.class) {
            return confirm("This will reset your character creation progress. Are you sure?");
        }
        return true;
    } catch (e) {
        setup.handleError("confirmRestart", e);
        return true; // Default to allowing restart if there's an error
    }
};

// Character save and load functions using SugarCube's storage API
setup.saveCharacter = function() {
    try {
        // Create a character object from the current state variables
        const character = {
            name: State.variables.name || "",
            race: State.variables.race || "",
            background: State.variables.background || "",
            backgroundDesc: State.variables.backgroundDesc || "",
            class: State.variables.class || "",
            classDesc: State.variables.classDesc || "",
            pronouns: State.variables.pronouns || "",
            stats: jQuery.extend(true, {}, State.variables.stats || {
                strength: 10,
                dexterity: 10,
                intelligence: 10,
                charisma: 10
            })
        };
        
        // Use SugarCube's state metadata for character storage
        State.metadata.set('savedCharacter', character);
        return JSON.stringify(character);
    } catch (e) {
        setup.handleError("saveCharacter", e);
        UI.alert("Failed to save character: " + e.message);
        return null;
    }
};

setup.loadCharacter = function() {
    try {
        if (!State.metadata.has('savedCharacter')) {
            UI.alert("No saved character found.");
            return null;
        }
        
        const character = State.metadata.get('savedCharacter');
        
        if (!character || typeof character !== 'object') {
            UI.alert("Invalid saved character data.");
            return null;
        }
        
        // Restore character data to state
        State.variables.name = character.name || "";
        State.variables.race = character.race || "";
        State.variables.background = character.background || "";
        State.variables.backgroundDesc = character.backgroundDesc || "";
        State.variables.class = character.class || "";
        State.variables.classDesc = character.classDesc || "";
        State.variables.pronouns = character.pronouns || "";
        
        // Make a deep copy of stats to avoid reference issues
        State.variables.stats = jQuery.extend(true, {}, character.stats || {
            strength: 10,
            dexterity: 10,
            intelligence: 10,
            charisma: 10
        });
        
        // Calculate stat points remaining (assuming default points were 10)
        let spentPoints = 0;
        for (const stat in State.variables.stats) {
            if (State.variables.stats.hasOwnProperty(stat)) {
                spentPoints += Math.max(0, State.variables.stats[stat] - 10);
            }
        }
        State.variables.statPoints = Math.max(0, 10 - spentPoints);
        
        return character;
    } catch (e) {
        setup.handleError("loadCharacter", e);
        UI.alert("Failed to load character: " + e.message);
        return null;
    }
};

// Custom macro for character stat blocks in the point-buy system
Macro.add('statBlock', {
    handler: function() {
        try {
            if (this.args.length < 1) {
                return this.error('The <<statBlock>> macro requires a stat name as an argument');
            }
            
            const stat = this.args[0];
            
            // Ensure stats are initialised
            if (!State.variables.stats) {
                State.variables.stats = jQuery.extend(true, {}, setup.characterDefaults.stats);
            }
            
            // If the requested stat doesn't exist yet, initialise it
            if (!(stat in State.variables.stats)) {
                State.variables.stats[stat] = 10;
            }
            
            const value = State.variables.stats[stat];
            const modifier = Math.floor((value - 10) / 2);
            const modifierText = (modifier >= 0) ? `+${modifier}` : `${modifier}`;
            
            // Use SugarCube's event handling approach instead of direct onclick
            const output = `
            <div class="stat-block tooltip-trigger" aria-label="${stat.charAt(0).toUpperCase() + stat.slice(1)} stat block">
                <label for="${stat}-value">${stat.charAt(0).toUpperCase() + stat.slice(1)}</label>
                <span id="${stat}-value" aria-live="polite">${value}</span>
                <button id="decrease-${stat}" aria-label="Decrease ${stat}" 
                        ${value <= 8 ? 'disabled aria-disabled="true"' : ''}>-</button>
                <button id="increase-${stat}" aria-label="Increase ${stat}" 
                        ${(State.variables.statPoints <= 0 || value >= 18) ? 'disabled aria-disabled="true"' : ''}>+</button>
                <span id="${stat}-modifier" aria-label="${stat} modifier">${modifierText}</span>
                <div class="tooltip">Base ${stat} score. Modifier shown is ${modifierText}.</div>
            </div>`;
            
            $(this.output).wiki(output);
            
            // Attach event handlers *after* adding to DOM
            $(this.output).find(`#increase-${stat}`).on('click', function() {
                if (State.variables.statPoints > 0 && State.variables.stats[stat] < 18) {
                    State.variables.stats[stat]++;
                    State.variables.statPoints--;
                    // Update display
                    $(`#${stat}-value`).text(State.variables.stats[stat]);
                    const newMod = Math.floor((State.variables.stats[stat] - 10) / 2);
                    const newModText = (newMod >= 0) ? `+${newMod}` : `${newMod}`;
                    $(`#${stat}-modifier`).text(newModText);
                    $('#points-remaining').text(State.variables.statPoints);
                    
                    // Update button states
                    if (State.variables.stats[stat] >= 18) {
                        $(this).attr('disabled', true).attr('aria-disabled', 'true');
                    }
                    $(`#decrease-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    
                    if (State.variables.statPoints <= 0) {
                        $('.stat-block button[id^="increase-"]').attr('disabled', true).attr('aria-disabled', 'true');
                    }
                }
            });
            
            $(this.output).find(`#decrease-${stat}`).on('click', function() {
                if (State.variables.stats[stat] > 8) {
                    State.variables.stats[stat]--;
                    State.variables.statPoints++;
                    // Update display
                    $(`#${stat}-value`).text(State.variables.stats[stat]);
                    const newMod = Math.floor((State.variables.stats[stat] - 10) / 2);
                    const newModText = (newMod >= 0) ? `+${newMod}` : `${newMod}`;
                    $(`#${stat}-modifier`).text(newModText);
                    $('#points-remaining').text(State.variables.statPoints);
                    
                    // Update button states
                    if (State.variables.stats[stat] <= 8) {
                        $(this).attr('disabled', true).attr('aria-disabled', 'true');
                    }
                    $(`#increase-${stat}`).attr('disabled', false).attr('aria-disabled', 'false');
                    
                    if (State.variables.statPoints > 0) {
                        $('.stat-block button[id^="increase-"]').each(function() {
                            const targetStat = $(this).attr('id').replace('increase-', '');
                            if (State.variables.stats[targetStat] < 18) {
                                $(this).attr('disabled', false).attr('aria-disabled', 'false');
                            }
                        });
                    }
                }
            });
        } catch (e) {
            return this.error(`Error in statBlock macro: ${e.message}`);
        }
    }
});

// -------------------------------
// Event Handlers and Enhancements
// -------------------------------

// Story startup event handlers
$(document).one(':storyready', function() {
    // Initialize character state
    setup.validateProgressionState();
    
    // Initialise accessibility settings and apply them
    setup.initializeAccessibility();
    setup.applyAccessibilitySettings();
    
    // Setup keyboard navigation (if not already defined)
    if (!setup.setupKeyboardNavigation) {
        setup.setupKeyboardNavigation = function() {
            // Keyboard navigation is handled by the global keydown event below.
        };
    }
    setup.setupKeyboardNavigation();
    
    // Adjust layout for current screen size
    setup.adjustLayoutForScreenSize();
});

// Passage transition event handlers
$(document).on(':passagestart', function(ev) {
    // Validate navigation
    setup.validatePassageNavigation(ev.passage.title);
});

$(document).on(':passagerender', function(ev) {
    // Initialise UI
    setup.initializeUI();
});

// -------------------------------
// Enhanced Accessibility Settings
// -------------------------------

// 1. Improved screen reader accessibility for interactive elements
$(document).on(':passagerender', function() {
    // Improve ARIA labels for all interactive elements
    $('.class-option button, .selection-card button').each(function() {
        const optionName = $(this).text().trim();
        const description = $(this).closest('.class-option, .selection-card')
                                  .find('p').first().text().trim() || '';
        
        $(this).attr('aria-label', `Select ${optionName}: ${description.substring(0, 100)}...`);
    });
    
    // Make interactive elements properly focusable
    $('button:not([tabindex]), a:not([tabindex]), [role="button"]:not([tabindex])')
        .attr('tabindex', '0');
    
    // Ensure disabled buttons are properly marked for screen readers
    $('.disabled-button, button[disabled]')
        .attr('aria-disabled', 'true')
        .attr('tabindex', '-1');
    
    // Add ARIA live regions to dynamic content areas
    $('.selected-class-display, #selected-race, #selected-background, #selected-class')
        .attr('aria-live', 'polite');
    
    // Make error messages accessible to screen readers
    $('.error').attr('aria-live', 'assertive');
    
    // Add proper roles to selection grids
    $('.class-options, .selection-grid').attr('role', 'group');
    $('.class-option, .selection-card').attr('role', 'group');
    
    // Improve skip navigation
    if ($('#skip-to-content').length === 0) {
        $('body').prepend('<a id="skip-to-content" href="#passages">Skip to content</a>');
    }
});

// 2. Enhanced keyboard navigation for grid layouts and Enter key support
$(document).on('keydown', function(e) {
    // Handle arrow key navigation in grid layouts
    if (e.key === 'ArrowRight' || e.key === 'ArrowLeft' || 
        e.key === 'ArrowUp' || e.key === 'ArrowDown') {
        
        if ($('.class-option button, .selection-card button').length > 0) {
            const focusableElements = $('.class-option button, .selection-card button').toArray();
            const currentElement = document.activeElement;
            
            if (!focusableElements.includes(currentElement)) {
                // If no element is focused, focus the first one on any arrow key
                focusableElements[0].focus();
                e.preventDefault();
                return;
            }
            
            const currentIndex = focusableElements.indexOf(currentElement);
            const columnsCount = Math.floor($('.class-options, .selection-grid').width() / 
                                            $('.class-option, .selection-card').first().outerWidth(true)) || 3;
            
            let newIndex = currentIndex;
            
            if (e.key === 'ArrowRight') {
                newIndex = Math.min(focusableElements.length - 1, currentIndex + 1);
            } else if (e.key === 'ArrowLeft') {
                newIndex = Math.max(0, currentIndex - 1);
            } else if (e.key === 'ArrowDown') {
                newIndex = Math.min(focusableElements.length - 1, currentIndex + columnsCount);
            } else if (e.key === 'ArrowUp') {
                newIndex = Math.max(0, currentIndex - columnsCount);
            }
            
            if (newIndex !== currentIndex) {
                focusableElements[newIndex].focus();
                e.preventDefault();
            }
        }
    }
    
    // Add Enter key support for elements with role="button"
    if (e.key === 'Enter') {
        const activeElement = document.activeElement;
        if (activeElement && $(activeElement).attr('role') === 'button') {
            $(activeElement).trigger('click');
            e.preventDefault();
        }
    }
});

// 3. Add accessibility menu button to the page if it doesn't exist
$(document).on(':passagerender', function() {
    if ($('#accessibility-menu-button').length === 0) {
        $('#passages').prepend(
            $('<button id="accessibility-menu-button" aria-label="Accessibility Settings">')
                .text('Accessibility')
                .on('click', function() {
                    UI.settings();
                })
        );
    }
});

// 4. Improved tooltips for screen readers
$(document).on(':passagerender', function() {
    $('.tooltip-trigger').each(function() {
        // Extract tooltip text
        const tooltipText = $(this).find('.tooltip').text();
        if (tooltipText && !$(this).attr('aria-label')) {
            $(this).attr('aria-label', tooltipText);
        }
    });
});

// 5. Ensure screen reader announcements for error messages
$(document).on(':passagerender', function() {
    // Monitor changes to error messages
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                const errorText = $(mutation.target).text().trim();
                if (errorText) {
                    // Announce the error
                    $(mutation.target).attr('role', 'alert');
                }
            }
        });
    });
    
    // Observe error message containers
    $('.error').each(function() {
        observer.observe(this, { childList: true, subtree: true });
    });
});

// 6. Improve screen reader experience for stat points
$(document).on(':passagerender', function() {
    // Ensure stat distribution is accessible
    if ($('.stat-distribution').length > 0) {
        $('.stat-distribution').attr('aria-label', 'Stat distribution panel');
        
        // Improve stat block accessibility
        $('.stat-block').each(function() {
            const statName = $(this).find('label').text();
            const statValue = $(this).find('[id$="-value"]').text();
            
            $(this).find('button[id^="increase-"]').attr('aria-label', `Increase ${statName} (currently ${statValue})`);
            $(this).find('button[id^="decrease-"]').attr('aria-label', `Decrease ${statName} (currently ${statValue})`);
        });
        
        // Make points remaining more accessible
        $('#points-remaining').parent().attr('role', 'status')
            .attr('aria-label', 'Points remaining: ' + $('#points-remaining').text());
    }
});

// -------------------------------
// Updated Accessibility Settings Options
// -------------------------------

Setting.addHeader("Accessibility", "Options to improve game accessibility");

Setting.addList("fontSize", {
    label: "Text Size",
    desc: "Adjust the size of text throughout the game",
    list: ["small", "medium", "large", "extra-large"],
    default: "medium",
    onInit: function() {
        $('html').removeClass('text-small text-medium text-large text-extra-large')
                .addClass('text-' + settings.fontSize);
    },
    onChange: function() {
        $('html').removeClass('text-small text-medium text-large text-extra-large')
                .addClass('text-' + settings.fontSize);
    }
});

Setting.addToggle("highContrast", {
    label: "High Contrast Mode",
    desc: "Increases contrast for better readability",
    default: false,
    onInit: function() {
        if (settings.highContrast) {
            $('html').addClass('high-contrast');
        } else {
            $('html').removeClass('high-contrast');
        }
    },
    onChange: function() {
        if (settings.highContrast) {
            $('html').addClass('high-contrast');
        } else {
            $('html').removeClass('high-contrast');
        }
    }
});

Setting.addToggle("reduceAnimations", {
    label: "Reduce Animations",
    desc: "Minimises or removes animations that may cause discomfort",
    default: false,
    onInit: function() {
        if (settings.reduceAnimations) {
            $('html').addClass('reduce-animations');
        } else {
            $('html').removeClass('reduce-animations');
        }
    },
    onChange: function() {
        if (settings.reduceAnimations) {
            $('html').addClass('reduce-animations');
        } else {
            $('html').removeClass('reduce-animations');
        }
    }
});

Setting.addToggle("focusHighlight", {
    label: "Enhanced Focus Indicators",
    desc: "Makes it easier to see which element is currently focused",
    default: false,
    onInit: function() {
        if (settings.focusHighlight) {
            $('html').addClass('enhanced-focus');
        } else {
            $('html').removeClass('enhanced-focus');
        }
    },
    onChange: function() {
        if (settings.focusHighlight) {
            $('html').addClass('enhanced-focus');
        } else {
            $('html').removeClass('enhanced-focus');
        }
    }
});

// Accessibility functions (already defined below in the file)
setup.initializeAccessibility = function() {
    try {
        if (!State.variables.accessibility) {
            State.variables.accessibility = {
                fontSize: settings.fontSize || 'medium',
                highContrast: settings.highContrast || false,
                reduceAnimations: settings.reduceAnimations || false,
                focusHighlight: settings.focusHighlight || false
            };
        }
        return true;
    } catch (e) {
        return setup.handleError("initializeAccessibility", e);
    }
};

setup.applyAccessibilitySettings = function() {
    try {
        const html = document.documentElement;
        
        // Apply font size
        if (settings.fontSize) {
            html.classList.remove('text-small', 'text-medium', 'text-large', 'text-extra-large');
            html.classList.add('text-' + settings.fontSize);
        }
        
        // Apply contrast
        if (settings.highContrast) {
            html.classList.add('high-contrast');
        } else {
            html.classList.remove('high-contrast');
        }
        
        // Apply animation reduction
        if (settings.reduceAnimations) {
            html.classList.add('reduce-motion');
        } else {
            html.classList.remove('reduce-motion');
        }
        
        // Apply focus highlighting
        if (settings.focusHighlight) {
            html.classList.add('enhanced-focus');
        } else {
            html.classList.remove('enhanced-focus');
        }
        
        return true;
    } catch (e) {
        return setup.handleError("applyAccessibilitySettings", e);
    }
};
