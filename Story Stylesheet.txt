// ----- ARIA and Screen Reader Improvements -----

// 1. Enhanced screen reader support for character creation steps
$(document).on(":passagerender", function() {
    // Add proper ARIA roles and labels to all interactive elements
    $('.creation-progress').attr('role', 'progressbar')
        .attr('aria-valuemin', '1')
        .attr('aria-valuemax', '6');
    
    // Set current progress step based on active class
    const activeStepIndex = $('.progress-step.active').index() + 1;
    const totalSteps = $('.progress-step').length;
    
    $('.creation-progress').attr('aria-valuenow', activeStepIndex)
        .attr('aria-valuetext', 'Step ' + activeStepIndex + ' of ' + totalSteps);
    
    // Add descriptive ARIA labels to all selection options
    $('.class-option button, .pixel-art-container').each(function() {
        const optionText = $(this).text().trim();
        const descriptionEl = $(this).closest('.class-option').find('p');
        const description = descriptionEl.length ? descriptionEl.text().trim() : '';
        
        $(this).attr('aria-label', optionText + (description ? ': ' + description : ''));
    });
    
    // Make sure all form controls have proper labels
    $('input:not([aria-label]), textarea:not([aria-label])').each(function() {
        const id = $(this).attr('id');
        const labelEl = $('label[for="' + id + '"]');
        
        if (!labelEl.length) {
            const placeholderText = $(this).attr('placeholder') || '';
            $(this).attr('aria-label', placeholderText || 'Input field');
        }
    });
    
    // Add live regions for dynamic content
    $('.selected-class-display, #selected-background, #selected-race, #name-error, #pronoun-error')
        .attr('aria-live', 'polite');
});

// 2. Enhanced keyboard navigation
$(document).on("keydown", function(e) {
    // Add arrow key navigation for selection grids
    if ($('.class-option').length && (e.key === 'ArrowRight' || e.key === 'ArrowLeft' || 
                                     e.key === 'ArrowUp' || e.key === 'ArrowDown')) {
        const focusableElements = $('.class-option button:visible').toArray();
        const currentElement = document.activeElement;
        const currentIndex = focusableElements.indexOf(currentElement);
        
        if (currentIndex !== -1) {
            let newIndex = currentIndex;
            const columns = Math.round(Math.sqrt(focusableElements.length));
            
            switch(e.key) {
                case 'ArrowRight':
                    newIndex = Math.min(focusableElements.length - 1, currentIndex + 1);
                    break;
                case 'ArrowLeft':
                    newIndex = Math.max(0, currentIndex - 1);
                    break;
                case 'ArrowDown':
                    newIndex = Math.min(focusableElements.length - 1, currentIndex + columns);
                    break;
                case 'ArrowUp':
                    newIndex = Math.max(0, currentIndex - columns);
                    break;
            }
            
            if (newIndex !== currentIndex && focusableElements[newIndex]) {
                focusableElements[newIndex].focus();
                e.preventDefault();
            }
        }
    }
    
    // Add 'Enter' key support for elements with role="button"
    if (e.key === 'Enter') {
        const el = document.activeElement;
        if (el && el.getAttribute('role') === 'button' && !el.disabled) {
            el.click();
            e.preventDefault();
        }
    }
});

// 3. Skip navigation for keyboard users
$('#passages').prepend(`
    <a href="#main-content" id="skip-to-content" class="visually-hidden">Skip to main content</a>
`);

// Add main content identifier
$(document).on(":passagerender", function() {
    // Add id to main content area if not already present
    if ($('#main-content').length === 0) {
        $('.passage > :first-child').attr('id', 'main-content');
    }
});

// 4. Improve focus visibility
$('head').append(`
    <style>
        /* Enhanced focus styles */
        *:focus {
            outline: 3px solid #FF6B6B !important;
            outline-offset: 3px !important;
        }
        
        /* Skip link styling */
        .visually-hidden {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
        
        .visually-hidden:focus {
            position: fixed;
            top: 0;
            left: 0;
            width: auto;
            height: auto;
            padding: 10px;
            margin: 10px;
            background: #1A1B23;
            color: #00FFBB;
            z-index: 9999;
            overflow: visible;
            clip: auto;
            white-space: normal;
            text-decoration: none;
            border: 2px solid #00FFBB;
        }
    </style>
`);

// 5. Accessibility Settings API extensions
Setting.addHeader("Accessibility Settings", "Options to make the game more accessible");

// Font size setting
Setting.addList("fontSize", {
    label: "Text Size",
    desc: "Change the size of text throughout the game",
    list: ["small", "normal", "large", "x-large"],
    default: "normal",
    onInit: function() {
        applyFontSize(settings.fontSize);
    },
    onChange: function() {
        applyFontSize(settings.fontSize);
    }
});

// Apply font size changes
function applyFontSize(size) {
    $('html').removeClass('text-small text-normal text-large text-x-large')
             .addClass('text-' + size);
}

// High contrast mode
Setting.addToggle("highContrast", {
    label: "High Contrast Mode",
    desc: "Increases contrast for better visibility",
    default: false,
    onInit: function() {
        applyContrastMode(settings.highContrast);
    },
    onChange: function() {
        applyContrastMode(settings.highContrast);
    }
});

// Apply contrast mode changes
function applyContrastMode(enabled) {
    if (enabled) {
        $('html').addClass('high-contrast');
    } else {
        $('html').removeClass('high-contrast');
    }
}

// Motion reduction
Setting.addToggle("reduceMotion", {
    label: "Reduce Motion",
    desc: "Decreases or removes animations",
    default: false,
    onInit: function() {
        applyReduceMotion(settings.reduceMotion);
    },
    onChange: function() {
        applyReduceMotion(settings.reduceMotion);
    }
});

// Apply motion reduction
function applyReduceMotion(enabled) {
    if (enabled) {
        $('html').addClass('reduce-motion');
    } else {
        $('html').removeClass('reduce-motion');
    }
}

// 6. Add CSS for accessibility modes
$('head').append(`
    <style>
        /* Font size classes */
        html.text-small {
            font-size: 14px;
        }
        
        html.text-normal {
            font-size: 16px;
        }
        
        html.text-large {
            font-size: 18px;
        }
        
        html.text-x-large {
            font-size: 20px;
        }
        
        /* High contrast mode */
        html.high-contrast {
            --neon-primary: #00FF00;
            --neon-secondary: #FF0000;
            --dark-primary: #000000;
            --dark-secondary: #0A0A0A;
            color: #FFFFFF;
        }
        
        html.high-contrast button,
        html.high-contrast a {
            color: #FFFFFF;
            border-color: #FFFFFF;
            background-color: #000000;
        }
        
        html.high-contrast .class-option,
        html.high-contrast .stat-block,
        html.high-contrast .name-entry,
        html.high-contrast .pronoun-selection {
            background-color: #000000;
            border-color: #FFFFFF;
        }
        
        /* Reduce motion */
        html.reduce-motion * {
            animation-duration: 0.001s !important;
            transition-duration: 0.001s !important;
        }
    </style>
`);

// 7. Add tooltip accessibility enhancements
$(document).on(":passagerender", function() {
    $('.tooltip-trigger').each(function() {
        const tooltip = $(this).find('.tooltip');
        if (tooltip.length) {
            // If tooltip exists, set up ARIA attributes
            const id = 'tooltip-' + Math.random().toString(36).substring(2, 10);
            tooltip.attr('id', id)
                   .attr('role', 'tooltip')
                   .attr('aria-hidden', 'true');
            
            $(this).attr('aria-describedby', id);
            
            // Toggle tooltip visibility
            $(this).on('mouseenter focus', function() {
                tooltip.attr('aria-hidden', 'false');
            }).on('mouseleave blur', function() {
                tooltip.attr('aria-hidden', 'true');
            });
        }
    });
});

// 8. Add ARIA to stat blocks
$(document).on(":passagerender", function() {
    $('.stat-block').each(function() {
        const valueEl = $(this).find('[id$="-value"]');
        const modifierEl = $(this).find('[id$="-modifier"]');
        
        if (valueEl.length) {
            const statName = valueEl.attr('id').replace('-value', '');
            $(this).attr('role', 'group')
                   .attr('aria-label', statName + ' attribute');
            
            // Announce changes to the value
            const increaseBtn = $(this).find('[id^="increase-"]');
            const decreaseBtn = $(this).find('[id^="decrease-"]');
            
            increaseBtn.attr('aria-label', 'Increase ' + statName);
            decreaseBtn.attr('aria-label', 'Decrease ' + statName);
            
            valueEl.attr('aria-live', 'polite')
                   .attr('role', 'status');
            
            if (modifierEl.length) {
                modifierEl.attr('aria-live', 'polite')
                          .attr('role', 'status');
            }
        }
    });
});

// 9. Add accessibility button to UI
$(document).one(":passagestart", function() {
    if ($('#accessibility-button').length === 0) {
        $('#ui-bar').find('#ui-bar-toggle').after(`
            <button id="accessibility-button" aria-label="Accessibility Settings" title="Accessibility Settings">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                    <path d="M12 5V19" stroke="currentColor" stroke-width="2"/>
                    <path d="M5 12H19" stroke="currentColor" stroke-width="2"/>
                </svg>
            </button>
        `);
        
        $('#accessibility-button').on('click', function() {
            UI.settings();
        });
    }
});

// Add CSS for accessibility button
$('head').append(`
    <style>
        #accessibility-button {
            padding: 0.5em;
            background: transparent;
            border: none;
            color: inherit;
            cursor: pointer;
        }
        
        #accessibility-button:hover {
            background: rgba(255, 255, 255, 0.1);
        }
    </style>
`);

// 10. Add descriptive help text for form inputs
$(document).on(":passagerender", function() {
    // Add descriptive text for name field
    if ($('#name-box').length && !$('#name-help-text').length) {
        $('#name-box').after(`
            <div id="name-help-text" class="help-text">
                Enter a name for your character. Name should be 2-20 characters long and may include letters, spaces, hyphens, and apostrophes.
            </div>
        `);
        
        // Connect help text to input with aria-describedby
        $('#name-box input').attr('aria-describedby', 'name-help-text');
    }
    
    // Add help text for stat distribution
    if ($('.stat-distribution').length && !$('#stat-help-text').length) {
        $('.points-remaining').after(`
            <div id="stat-help-text" class="help-text">
                Distribute your attribute points. Higher values give better chances at related skills. You must spend all points before continuing.
            </div>
        `);
    }
});

// Add CSS for help text
$('head').append(`
    <style>
        .help-text {
            font-size: 0.9em;
            margin: 0.5em 0 1em;
            color: #ccc;
        }
        
        html.high-contrast .help-text {
            color: #FFFFFF;
        }
    </style>
`);
